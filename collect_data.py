#!/usr/bin/env python3
"""
Skript na zber d√°t pre tr√©novanie modelu rozpozn√°vania giest
F√°za 2 - √öloha 1: Vytvorenie skriptu na zber d√°t
"""

import cv2
import mediapipe as mp
import numpy as np
import os
import time
import json
from pathlib import Path
import logging

# Nastavenie logovania
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

class GestureDataCollector:
    """Trieda na zber d√°t pre tr√©novanie giest"""
    
    def __init__(self, data_path="gesture_data"):
        self.data_path = Path(data_path)
        self.data_path.mkdir(exist_ok=True)
        
        # Inicializ√°cia MediaPipe
        self.mp_hands = mp.solutions.hands
        self.hands = self.mp_hands.Hands(
            static_image_mode=False,
            max_num_hands=1,
            min_detection_confidence=0.7,
            min_tracking_confidence=0.5
        )
        self.mp_draw = mp.solutions.drawing_utils
        
        # Konfigur√°cia zberu d√°t
        self.sequence_length = 30  # Poƒçet sn√≠mkov v sekvencii
        self.num_landmarks = 21   # Poƒçet kƒæ√∫ƒçov√Ωch bodov ruky
        self.coords_per_landmark = 3  # x, y, z s√∫radnice
        
        # Predvolen√© gest√° (kompatibiln√© s train_model.py)
        self.available_gestures = [
            'pest',           # Zatvoren√° p√§s≈•
            'otvorena_dlan',  # Otvoren√° dla≈à
            'palec_hore',     # Thumbs up
            'ukazovak',       # Ukazov√°k
        ]
        
        # Naƒç√≠tanie existuj√∫cich d√°t
        self.load_metadata()
        
    def load_metadata(self):
        """Naƒç√≠ta metadata o existuj√∫cich d√°tach"""
        metadata_file = self.data_path / "metadata.json"
        if metadata_file.exists():
            with open(metadata_file, 'r', encoding='utf-8') as f:
                self.metadata = json.load(f)
        else:
            self.metadata = {
                'gestures': {},
                'total_sequences': 0,
                'last_updated': None
            }
    
    def save_metadata(self):
        """Ulo≈æ√≠ metadata"""
        self.metadata['last_updated'] = time.strftime('%Y-%m-%d %H:%M:%S')
        metadata_file = self.data_path / "metadata.json"
        with open(metadata_file, 'w', encoding='utf-8') as f:
            json.dump(self.metadata, f, indent=2, ensure_ascii=False)
    
    def extract_landmarks(self, results):
        """Extraktuje kƒæ√∫ƒçov√© body z MediaPipe v√Ωsledkov"""
        if results.multi_hand_landmarks:
            hand_landmarks = results.multi_hand_landmarks[0]
            landmarks = []
            
            for landmark in hand_landmarks.landmark:
                landmarks.extend([landmark.x, landmark.y, landmark.z])
            
            return np.array(landmarks)
        else:
            # Ak nie s√∫ detekovan√© ruky, vr√°ti nuly
            return np.zeros(self.num_landmarks * self.coords_per_landmark)
    
    def create_gesture_directory(self, gesture_name):
        """Vytvor√≠ adres√°r pre gesto"""
        gesture_dir = self.data_path / gesture_name
        gesture_dir.mkdir(exist_ok=True)
        return gesture_dir
    
    def get_next_sequence_number(self, gesture_name):
        """Z√≠ska ƒç√≠slo ƒèal≈°ej sekvencie pre dan√© gesto"""
        gesture_dir = self.data_path / gesture_name
        if not gesture_dir.exists():
            return 0
        
        existing_sequences = [int(d.name) for d in gesture_dir.iterdir() 
                            if d.is_dir() and d.name.isdigit()]
        return max(existing_sequences, default=-1) + 1
    
    def collect_gesture_sequence(self, gesture_name, sequence_number):
        """Zbiera jednu sekvenciu pre dan√© gesto"""
        print(f"\n=== ZBER SEKVENCIE {sequence_number} PRE GESTO '{gesture_name.upper()}' ===")
        
        # Vytvorenie adres√°ra pre sekvenciu
        sequence_dir = self.data_path / gesture_name / str(sequence_number)
        sequence_dir.mkdir(parents=True, exist_ok=True)
        
        # Inicializ√°cia kamery
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            logger.error("Nemo≈æno otvori≈• kameru")
            return False
        
        collected_frames = []
        frame_count = 0
        recording = False
        
        print("In≈°trukcie:")
        print("- Stlaƒçte SPACE pre zaƒçatie nahr√°vania")
        print("- Udr≈æujte gesto poƒças nahr√°vania")
        print("- Stlaƒçte 'q' pre ukonƒçenie")
        print("- Stlaƒçte 'r' pre re≈°tart sekvencie")
        
        while True:
            ret, frame = cap.read()
            if not ret:
                break
            
            # Zrkadlenie obrazu
            frame = cv2.flip(frame, 1)
            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            
            # Detekcia r√∫k
            results = self.hands.process(rgb_frame)
            
            # Kreslenie kƒæ√∫ƒçov√Ωch bodov
            if results.multi_hand_landmarks:
                for hand_landmarks in results.multi_hand_landmarks:
                    self.mp_draw.draw_landmarks(frame, hand_landmarks, self.mp_hands.HAND_CONNECTIONS)
            
            # Zobrazenie stavu
            status_color = (0, 255, 0) if recording else (0, 0, 255)
            status_text = f"NAHRAVAM {frame_count}/{self.sequence_length}" if recording else "STLAC SPACE PRE START"
            cv2.putText(frame, status_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, status_color, 2)
            
            cv2.putText(frame, f"Gesto: {gesture_name.upper()}", (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            cv2.putText(frame, f"Sekvencia: {sequence_number}", (10, 100), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            
            # Nahr√°vanie
            if recording:
                landmarks = self.extract_landmarks(results)
                collected_frames.append(landmarks)
                frame_count += 1
                
                if frame_count >= self.sequence_length:
                    # Ulo≈æenie sekvencie
                    for i, landmarks in enumerate(collected_frames):
                        np.save(sequence_dir / f"{i}.npy", landmarks)
                    
                    print(f"‚úÖ Sekvencia {sequence_number} ulo≈æen√°!")
                    cap.release()
                    cv2.destroyAllWindows()
                    return True
            
            cv2.imshow('Zber d√°t pre gest√°', frame)
            
            # Spracovanie kl√°vesov
            key = cv2.waitKey(1) & 0xFF
            if key == ord(' ') and not recording:
                recording = True
                collected_frames = []
                frame_count = 0
                print("üî¥ Zaƒç√≠nam nahr√°vanie...")
            elif key == ord('r'):
                recording = False
                collected_frames = []
                frame_count = 0
                print("üîÑ Re≈°tart sekvencie")
            elif key == ord('q'):
                break
        
        cap.release()
        cv2.destroyAllWindows()
        return False
    
    def collect_gesture_data(self, gesture_name, num_sequences=30):
        """Zbiera d√°ta pre konkr√©tne gesto"""
        if gesture_name not in self.available_gestures:
            print(f"‚ö†Ô∏è Gesto '{gesture_name}' nie je v zozname dostupn√Ωch giest.")
            print(f"Dostupn√© gest√°: {', '.join(self.available_gestures)}")
            return False
        
        print(f"\nüéØ ZBER D√ÅT PRE GESTO: {gesture_name.upper()}")
        print(f"Cieƒæ: {num_sequences} sekvenci√≠")
        
        # Vytvorenie adres√°ra
        gesture_dir = self.create_gesture_directory(gesture_name)
        
        # Z√≠skanie poƒçtu existuj√∫cich sekvenci√≠
        start_sequence = self.get_next_sequence_number(gesture_name)
        existing_count = start_sequence
        
        if existing_count > 0:
            print(f"üìÅ N√°jden√Ωch {existing_count} existuj√∫cich sekvenci√≠")
            response = input(f"Pokraƒçova≈• od sekvencie {start_sequence}? (y/n): ")
            if response.lower() != 'y':
                return False
        
        # Zber sekvenci√≠
        successful_sequences = 0
        for i in range(start_sequence, start_sequence + num_sequences):
            print(f"\n--- Sekvencia {i+1}/{start_sequence + num_sequences} ---")
            
            if self.collect_gesture_sequence(gesture_name, i):
                successful_sequences += 1
            else:
                print("‚ùå Sekvencia nebola ulo≈æen√°")
                break
        
        # Aktualiz√°cia metad√°t
        if gesture_name not in self.metadata['gestures']:
            self.metadata['gestures'][gesture_name] = 0
        
        self.metadata['gestures'][gesture_name] += successful_sequences
        self.metadata['total_sequences'] += successful_sequences
        self.save_metadata()
        
        print(f"\n‚úÖ √öspe≈°ne zozbieran√© {successful_sequences} sekvenci√≠ pre gesto '{gesture_name}'")
        return True
    
    def show_statistics(self):
        """Zobraz√≠ statistiky zozbieran√Ωch d√°t"""
        print("\n" + "="*60)
        print("≈†TATISTIKY ZOZBIERAN√ùCH D√ÅT")
        print("="*60)
        
        if not self.metadata['gestures']:
            print("‚ùå ≈Ωiadne d√°ta nie s√∫ zozbieran√©")
            return
        
        total_sequences = 0
        for gesture, count in self.metadata['gestures'].items():
            print(f"{gesture:15} {count:3d} sekvenci√≠")
            total_sequences += count
        
        print("-" * 30)
        print(f"{'CELKOM':15} {total_sequences:3d} sekvenci√≠")
        
        if self.metadata['last_updated']:
            print(f"\nPosledn√° aktualiz√°cia: {self.metadata['last_updated']}")
    
    def interactive_menu(self):
        """Interakt√≠vne menu pre zber d√°t"""
        while True:
            print("\n" + "="*60)
            print("ZBER D√ÅT PRE TR√âNOVANIE GIEST")
            print("="*60)
            print("1. Zobrazi≈• dostupn√© gest√°")
            print("2. Zobrazi≈• ≈°tatistiky")
            print("3. Zbiera≈• d√°ta pre gesto")
            print("4. Zbiera≈• d√°ta pre v≈°etky gest√°")
            print("5. Ukonƒçi≈•")
            
            choice = input("\nVyberte mo≈ænos≈• (1-5): ").strip()
            
            if choice == '1':
                print("\nDostupn√© gest√°:")
                for i, gesture in enumerate(self.available_gestures, 1):
                    print(f"{i:2d}. {gesture}")
            
            elif choice == '2':
                self.show_statistics()
            
            elif choice == '3':
                print("\nDostupn√© gest√°:")
                for i, gesture in enumerate(self.available_gestures, 1):
                    print(f"{i:2d}. {gesture}")
                
                try:
                    gesture_idx = int(input("\nVyberte gesto (ƒç√≠slo): ")) - 1
                    if 0 <= gesture_idx < len(self.available_gestures):
                        gesture_name = self.available_gestures[gesture_idx]
                        num_sequences = int(input(f"Poƒçet sekvenci√≠ pre '{gesture_name}' (predvolen√© 30): ") or "30")
                        self.collect_gesture_data(gesture_name, num_sequences)
                    else:
                        print("‚ùå Neplatn√© ƒç√≠slo gesta")
                except ValueError:
                    print("‚ùå Neplatn√Ω vstup")
            
            elif choice == '4':
                num_sequences = int(input("Poƒçet sekvenci√≠ pre ka≈æd√© gesto (predvolen√© 30): ") or "30")
                for gesture in self.available_gestures:
                    print(f"\nüéØ Zbieranie d√°t pre gesto: {gesture}")
                    if not self.collect_gesture_data(gesture, num_sequences):
                        break
            
            elif choice == '5':
                print("üëã Ukonƒçujem zber d√°t")
                break
            
            else:
                print("‚ùå Neplatn√° voƒæba")

def main():
    """Hlavn√° funkcia"""
    print("ZBER D√ÅT PRE TR√âNOVANIE MODELU GIEST")
    print("F√°za 2 - √öloha 1")
    
    collector = GestureDataCollector()
    collector.interactive_menu()

if __name__ == "__main__":
    main()
