#!/usr/bin/env python3
"""
Skript na in≈°tal√°ciu PyTorch s podporou CUDA
F√°za 1 - √öloha 1: In≈°tal√°cia PyTorch s podporou CUDA
"""

import subprocess
import sys
import platform
import importlib.util

def check_current_pytorch():
    """Skontroluje aktu√°lnu in≈°tal√°ciu PyTorch"""
    print("="*60)
    print("KONTROLA AKTU√ÅLNEJ PYTORCH IN≈†TAL√ÅCIE")
    print("="*60)
    
    try:
        import torch
        print(f"‚úÖ PyTorch je u≈æ nain≈°talovan√Ω - verzia: {torch.__version__}")
        
        # Kontrola CUDA podpory
        if torch.cuda.is_available():
            print(f"‚úÖ CUDA je dostupn√° - verzia: {torch.version.cuda}")
            print(f"‚úÖ Poƒçet GPU: {torch.cuda.device_count()}")
            for i in range(torch.cuda.device_count()):
                print(f"   GPU {i}: {torch.cuda.get_device_name(i)}")
            return True, True
        else:
            print("‚ùå CUDA nie je dostupn√° v aktu√°lnej in≈°tal√°cii")
            return True, False
    except ImportError:
        print("‚ùå PyTorch nie je nain≈°talovan√Ω")
        return False, False

def detect_system_info():
    """Detekuje inform√°cie o syst√©me pre spr√°vnu in≈°tal√°ciu"""
    print("\n" + "="*60)
    print("DETEKCIA SYST√âMU")
    print("="*60)
    
    os_name = platform.system()
    python_version = f"{sys.version_info.major}.{sys.version_info.minor}"
    
    print(f"Operaƒçn√Ω syst√©m: {os_name}")
    print(f"Python verzia: {python_version}")
    
    # Detekcia CUDA verzie z nvidia-smi
    cuda_version = None
    try:
        result = subprocess.run(['nvidia-smi'], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            for line in result.stdout.split('\n'):
                if 'CUDA Version:' in line:
                    cuda_version = line.split('CUDA Version:')[1].strip().split()[0]
                    break
            print(f"CUDA verzia (z nvidia-smi): {cuda_version}")
        else:
            print("‚ö†Ô∏è nvidia-smi nie je dostupn√©")
    except:
        print("‚ö†Ô∏è Nemo≈æno detekova≈• CUDA verziu")
    
    return os_name, python_version, cuda_version

def get_pytorch_install_command(os_name, python_version, cuda_version):
    """Vr√°ti spr√°vny pr√≠kaz na in≈°tal√°ciu PyTorch"""
    print("\n" + "="*60)
    print("GENEROVANIE IN≈†TALAƒåN√âHO PR√çKAZU")
    print("="*60)
    
    # Z√°kladn√Ω pr√≠kaz
    base_cmd = [sys.executable, "-m", "pip", "install"]
    
    # Urƒçenie spr√°vnej CUDA verzie pre PyTorch
    if cuda_version:
        if cuda_version.startswith("12."):
            torch_cuda = "cu121"  # PyTorch podporuje CUDA 12.1
        elif cuda_version.startswith("11.8"):
            torch_cuda = "cu118"
        elif cuda_version.startswith("11."):
            torch_cuda = "cu118"  # Fallback na 11.8
        else:
            torch_cuda = "cu121"  # Default na najnov≈°iu
    else:
        torch_cuda = "cu121"  # Default ak nevieme detekova≈•
    
    print(f"Vybran√° PyTorch CUDA verzia: {torch_cuda}")
    
    # Bal√≠ƒçky na in≈°tal√°ciu
    packages = ["torch", "torchvision", "torchaudio"]
    
    # Index URL pre CUDA verziu
    index_url = f"https://download.pytorch.org/whl/{torch_cuda}"
    
    # Kompletn√Ω pr√≠kaz
    install_cmd = base_cmd + packages + ["--index-url", index_url]
    
    print(f"In≈°talaƒçn√Ω pr√≠kaz: {' '.join(install_cmd)}")
    return install_cmd

def install_pytorch_cuda(install_cmd):
    """Nain≈°taluje PyTorch s CUDA podporou"""
    print("\n" + "="*60)
    print("IN≈†TAL√ÅCIA PYTORCH S CUDA")
    print("="*60)
    
    try:
        print("Sp√∫≈°≈•am in≈°tal√°ciu...")
        print("Toto m√¥≈æe trva≈• niekoƒæko min√∫t...")
        
        # Spustenie in≈°tal√°cie
        result = subprocess.run(install_cmd, capture_output=True, text=True, timeout=600)
        
        if result.returncode == 0:
            print("‚úÖ In≈°tal√°cia √∫spe≈°n√°!")
            return True
        else:
            print("‚ùå In≈°tal√°cia zlyhala!")
            print("STDOUT:", result.stdout[-500:])  # Posledn√Ωch 500 znakov
            print("STDERR:", result.stderr[-500:])
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå In≈°tal√°cia prekroƒçila ƒçasov√Ω limit (10 min√∫t)")
        return False
    except Exception as e:
        print(f"‚ùå Chyba pri in≈°tal√°cii: {e}")
        return False

def verify_installation():
    """Over√≠ √∫spe≈°nos≈• in≈°tal√°cie"""
    print("\n" + "="*60)
    print("OVERENIE IN≈†TAL√ÅCIE")
    print("="*60)
    
    try:
        # Reload modulu ak u≈æ bol importovan√Ω
        if 'torch' in sys.modules:
            importlib.reload(sys.modules['torch'])
        
        import torch
        print(f"‚úÖ PyTorch verzia: {torch.__version__}")
        
        if torch.cuda.is_available():
            print(f"‚úÖ CUDA je dostupn√° - verzia: {torch.version.cuda}")
            print(f"‚úÖ Poƒçet GPU: {torch.cuda.device_count()}")
            
            # Test z√°kladnej oper√°cie
            device = torch.device('cuda')
            x = torch.randn(100, 100).to(device)
            y = torch.randn(100, 100).to(device)
            z = torch.matmul(x, y)
            print("‚úÖ CUDA oper√°cie funguj√∫!")
            
            return True
        else:
            print("‚ùå CUDA nie je dostupn√° po in≈°tal√°cii")
            return False
            
    except ImportError as e:
        print(f"‚ùå PyTorch sa nepodarilo importova≈•: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Chyba pri overovan√≠: {e}")
        return False

def main():
    """Hlavn√° funkcia in≈°tal√°cie"""
    print("IN≈†TAL√ÅCIA PYTORCH S CUDA PODPOROU")
    print("F√°za 1 - √öloha 1")
    
    # Kontrola aktu√°lnej in≈°tal√°cie
    pytorch_installed, cuda_available = check_current_pytorch()
    
    if pytorch_installed and cuda_available:
        print("\nüéâ PyTorch s CUDA je u≈æ spr√°vne nain≈°talovan√Ω!")
        print("M√¥≈æete pokraƒçova≈• s ƒèal≈°√≠mi √∫lohami.")
        return True
    
    # Detekcia syst√©mu
    os_name, python_version, cuda_version = detect_system_info()
    
    # Generovanie in≈°talaƒçn√©ho pr√≠kazu
    install_cmd = get_pytorch_install_command(os_name, python_version, cuda_version)
    
    # Potvrdenie od pou≈æ√≠vateƒæa
    print(f"\n‚ö†Ô∏è Chyst√°te sa nain≈°talova≈•/aktualizova≈• PyTorch s CUDA podporou.")
    print("Toto m√¥≈æe prep√≠sa≈• existuj√∫cu in≈°tal√°ciu PyTorch.")
    
    # Pre automatick√© spustenie bez interakcie
    response = "y"  # Automaticky pokraƒçujeme
    
    if response.lower() in ['y', 'yes', 'ano', 'a']:
        # In≈°tal√°cia
        success = install_pytorch_cuda(install_cmd)
        
        if success:
            # Overenie
            if verify_installation():
                print("\nüéâ √öSPECH! PyTorch s CUDA je spr√°vne nain≈°talovan√Ω!")
                print("F√°za 1 - √öloha 1 je dokonƒçen√°.")
                return True
            else:
                print("\n‚ùå In≈°tal√°cia prebehla, ale overenie zlyhalo.")
                return False
        else:
            print("\n‚ùå In≈°tal√°cia zlyhala.")
            return False
    else:
        print("In≈°tal√°cia zru≈°en√° pou≈æ√≠vateƒæom.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
