#!/usr/bin/env python3
"""
Jednoduch√Ω test ML gesture recognition bez multiprocessing
"""

import sys
import time
import threading
from queue import Queue
from pathlib import Path
import pyautogui

# Vypnutie PyAutoGUI fail-safe
pyautogui.FAILSAFE = False

def test_ml_gesture_recognition():
    """Test ML gesture recognition s threading"""
    print("ü§≤ TEST ML GESTURE RECOGNITION")
    print("=" * 50)
    
    try:
        from gesture_recognition_ml import MLGestureRecognizer
        
        # Vytvorenie queue
        q = Queue()
        
        # Test bez ML modelu (fallback)
        print("Testovanie bez ML modelu (rule-based fallback)...")
        recognizer = MLGestureRecognizer(q, use_ml=False)
        print(f"‚úÖ MLGestureRecognizer vytvoren√Ω (ML: {recognizer.use_ml})")
        
        # Test s ML modelom ak existuje
        model_exists = Path("gesture_model.pth").exists()
        print(f"ML model: {'‚úÖ Dostupn√Ω' if model_exists else '‚ùå Nedostupn√Ω'}")
        
        if model_exists:
            recognizer_ml = MLGestureRecognizer(q, use_ml=True)
            print(f"‚úÖ MLGestureRecognizer s ML vytvoren√Ω (ML: {recognizer_ml.use_ml})")
        
        # Test spustenia v thread
        print("\nSp√∫≈°≈•am gesture recognition v thread...")
        
        def run_recognition():
            try:
                recognizer.run()
            except Exception as e:
                print(f"Chyba v recognition thread: {e}")
        
        # Spustenie v thread
        recognition_thread = threading.Thread(target=run_recognition, daemon=True)
        recognition_thread.start()
        
        print("‚úÖ Thread spusten√Ω")
        print("Sledovanie giest na 10 sek√∫nd...")
        print("Uk√°≈æte gest√° pred kamerou!")
        
        # Sledovanie v√Ωstupu
        start_time = time.time()
        gesture_count = 0
        
        while time.time() - start_time < 10:
            if not q.empty():
                try:
                    gesture_type, gesture_info = q.get_nowait()
                    if gesture_type == "gesture":
                        gesture_count += 1
                        print(f"üéØ Rozpoznan√© gesto #{gesture_count}: {gesture_info}")
                except:
                    pass
            time.sleep(0.1)
        
        print(f"\nüìä V√Ωsledky:")
        print(f"   - Celkov√Ω ƒças: 10 sek√∫nd")
        print(f"   - Rozpoznan√© gest√°: {gesture_count}")
        print(f"   - Thread stav: {'‚úÖ Akt√≠vny' if recognition_thread.is_alive() else '‚ùå Ukonƒçen√Ω'}")
        
        # Zastavenie
        recognizer.stop()
        print("‚úÖ Test dokonƒçen√Ω")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Chyba pri importe: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Chyba pri teste: {e}")
        return False

def test_main_ml_import():
    """Test importu main_ml.py"""
    print("\nüè† TEST MAIN_ML IMPORT")
    print("=" * 50)
    
    try:
        # Test importu bez spustenia
        import importlib.util
        
        spec = importlib.util.spec_from_file_location("main_ml", "main_ml.py")
        if spec is None:
            print("‚ùå main_ml.py s√∫bor neexistuje")
            return False
        
        main_ml = importlib.util.module_from_spec(spec)
        
        # Test naƒç√≠tania modulu
        spec.loader.exec_module(main_ml)
        print("‚úÖ main_ml.py sa d√° naƒç√≠ta≈•")
        
        # Test existencie kƒæ√∫ƒçov√Ωch tried
        if hasattr(main_ml, 'ModernGUI'):
            print("‚úÖ ModernGUI trieda existuje")
        else:
            print("‚ùå ModernGUI trieda ch√Ωba")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Chyba pri teste main_ml: {e}")
        return False

def main():
    """Hlavn√° funkcia testovania"""
    print("üß™ JEDNODUCH√ù TEST ML GESTURE RECOGNITION")
    print("Stlaƒçte Ctrl+C pre ukonƒçenie")
    
    tests = [
        ("ML Gesture Recognition", test_ml_gesture_recognition),
        ("Main ML Import", test_main_ml_import)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\n--- {test_name} ---")
        try:
            result = test_func()
            results.append((test_name, result))
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è Test preru≈°en√Ω pou≈æ√≠vateƒæom")
            break
        except Exception as e:
            print(f"‚ùå Chyba v teste '{test_name}': {e}")
            results.append((test_name, False))
    
    # S√∫hrn
    print("\n" + "=" * 50)
    print("üìä S√öHRN TESTOV")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PRE≈†IEL" if result else "‚ùå ZLYHAL"
        print(f"{test_name:25} {status}")
        if result:
            passed += 1
    
    print(f"\nV√Ωsledok: {passed}/{total} testov pre≈°lo")
    
    if passed == total:
        print("\nüéâ V≈†ETKY TESTY PRE≈†LI!")
        print("\nüìã ƒéAL≈†IE KROKY:")
        print("1. Spustite: python main_ml.py")
        print("2. Kliknite na 'ü§≤ ML Gest√° OFF' pre zapnutie")
        print("3. Uk√°≈æte gest√° pred kamerou")
    else:
        print("\n‚ö†Ô∏è NIEKTOR√â TESTY ZLYHALI")
        print("Skontrolujte chyby vy≈°≈°ie")
    
    return passed == total

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\nüëã Test ukonƒçen√Ω")
        sys.exit(0)
