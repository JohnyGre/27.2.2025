#!/usr/bin/env python3
"""
Test dokonƒçenia F√°zy 1 z TODO.md
Overuje, ƒçi s√∫ splnen√© v≈°etky po≈æiadavky pre F√°zu 1
"""

import subprocess
import sys
import os

def test_pytorch_cuda_installation():
    """Test √∫lohy 1: In≈°tal√°cia PyTorch s podporou CUDA"""
    print("="*60)
    print("TEST √öLOHY 1: IN≈†TAL√ÅCIA PYTORCH S CUDA")
    print("="*60)
    
    try:
        import torch
        print(f"‚úÖ PyTorch je nain≈°talovan√Ω - verzia: {torch.__version__}")
        
        # Kontrola CUDA podpory
        if torch.cuda.is_available():
            print(f"‚úÖ CUDA je dostupn√° - verzia: {torch.version.cuda}")
            print(f"‚úÖ Poƒçet GPU: {torch.cuda.device_count()}")
            
            # Test z√°kladnej CUDA oper√°cie
            device = torch.device('cuda')
            x = torch.randn(10, 10).to(device)
            y = torch.randn(10, 10).to(device)
            z = torch.matmul(x, y)
            print("‚úÖ CUDA oper√°cie funguj√∫ spr√°vne!")
            
            return True
        else:
            print("‚ùå CUDA nie je dostupn√° v PyTorch")
            return False
            
    except ImportError:
        print("‚ùå PyTorch nie je nain≈°talovan√Ω")
        return False
    except Exception as e:
        print(f"‚ùå Chyba pri teste PyTorch: {e}")
        return False

def test_cuda_functionality():
    """Test √∫lohy 2: Overenie funkƒçnosti CUDA"""
    print("\n" + "="*60)
    print("TEST √öLOHY 2: OVERENIE FUNKƒåNOSTI CUDA")
    print("="*60)
    
    # Spustenie test_cuda.py skriptu
    try:
        result = subprocess.run([sys.executable, 'test_cuda.py'], 
                              capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0:
            print("‚úÖ test_cuda.py skript prebehol √∫spe≈°ne")
            
            # Kontrola v√Ωstupu na kƒæ√∫ƒçov√© indik√°tory √∫spechu
            output = result.stdout
            cuda_ops_ok = False
            gpu_speedup_ok = False
            system_ready = False

            if "CUDA operacie funguju spravne!" in output or "CUDA oper√°cie funguj√∫ spr√°vne!" in output:
                print("‚úÖ CUDA oper√°cie s√∫ funkƒçn√©")
                cuda_ops_ok = True
            if "GPU poskytuje vyznamne zrychlenie!" in output or "GPU poskytuje v√Ωznamn√© zr√Ωchlenie!" in output:
                print("‚úÖ GPU zr√Ωchlenie je potvrden√©")
                gpu_speedup_ok = True
            if ("SYSTEM JE PRIPRAVENY PRE STROJOVE UCENIE!" in output or
                "SYST√âM JE PRIPRAVEN√ù PRE STROJOV√â UƒåENIE!" in output or
                "SYSTEM JE CIASTOCNE PRIPRAVENY" in output or
                "SYST√âM JE ƒåIASTOƒåNE PRIPRAVEN√ù" in output):
                print("‚úÖ Syst√©m je pripraven√Ω pre ML")
                system_ready = True

            # Ak aspo≈à CUDA oper√°cie funguj√∫ a syst√©m je pripraven√Ω, pova≈æujeme to za √∫spech
            if cuda_ops_ok and system_ready:
                return True
            else:
                print("‚ö†Ô∏è Syst√©m m√¥≈æe ma≈• probl√©my s ML pripravenos≈•ou")
                return False
        else:
            print("‚ùå test_cuda.py skript zlyhal")
            print("STDERR:", result.stderr[-200:])
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå test_cuda.py skript prekroƒçil ƒçasov√Ω limit")
        return False
    except Exception as e:
        print(f"‚ùå Chyba pri spusten√≠ test_cuda.py: {e}")
        return False

def check_required_files():
    """Kontrola existencie potrebn√Ωch s√∫borov"""
    print("\n" + "="*60)
    print("KONTROLA POTREBN√ùCH S√öBOROV")
    print("="*60)
    
    required_files = [
        ("test_cuda.py", "Test skript pre CUDA"),
        ("install_pytorch_cuda.py", "In≈°talaƒçn√Ω skript pre PyTorch"),
        ("TODO.md", "TODO s√∫bor s √∫lohami")
    ]
    
    all_exist = True
    for filename, description in required_files:
        if os.path.exists(filename):
            print(f"‚úÖ {filename} - {description}")
        else:
            print(f"‚ùå {filename} - {description} (CH√ùBA)")
            all_exist = False
    
    return all_exist

def test_ml_readiness():
    """Test pripravenosti pre strojov√© uƒçenie"""
    print("\n" + "="*60)
    print("TEST PRIPRAVENOSTI PRE STROJOV√â UƒåENIE")
    print("="*60)
    
    try:
        import torch
        import torch.nn as nn
        import torch.optim as optim
        import time
        
        # Test vytvorenia jednoduchej neur√≥novej siete
        class SimpleNet(nn.Module):
            def __init__(self):
                super(SimpleNet, self).__init__()
                self.fc1 = nn.Linear(10, 5)
                self.fc2 = nn.Linear(5, 1)
                self.relu = nn.ReLU()
            
            def forward(self, x):
                x = self.relu(self.fc1(x))
                x = self.fc2(x)
                return x
        
        # Test na GPU
        if torch.cuda.is_available():
            device = torch.device('cuda')
            model = SimpleNet().to(device)
            optimizer = optim.Adam(model.parameters(), lr=0.001)
            criterion = nn.MSELoss()
            
            # Dummy d√°ta
            x = torch.randn(32, 10).to(device)
            y = torch.randn(32, 1).to(device)
            
            # Test tr√©novacieho kroku
            start_time = time.time()
            optimizer.zero_grad()
            output = model(x)
            loss = criterion(output, y)
            loss.backward()
            optimizer.step()
            end_time = time.time()
            
            print(f"‚úÖ Neur√≥nov√° sie≈• vytvoren√° a testovan√° na GPU")
            print(f"‚úÖ Tr√©novac√≠ krok trval: {(end_time - start_time)*1000:.2f} ms")
            print(f"‚úÖ Loss: {loss.item():.4f}")
            
            return True
        else:
            print("‚ùå GPU nie je dostupn√° pre ML tr√©novanie")
            return False
            
    except Exception as e:
        print(f"‚ùå Chyba pri teste ML pripravenosti: {e}")
        return False

def update_todo_status():
    """Aktualizuje TODO.md s√∫bor s oznaƒçen√≠m dokonƒçen√Ωch √∫loh"""
    print("\n" + "="*60)
    print("AKTUALIZ√ÅCIA TODO.MD")
    print("="*60)
    
    try:
        # ƒå√≠tanie aktu√°lneho TODO.md
        with open("TODO.md", "r", encoding="utf-8") as f:
            content = f.read()
        
        # Oznaƒçenie dokonƒçen√Ωch √∫loh v F√°ze 1
        updated_content = content.replace(
            "- [ ] **1. In≈°tal√°cia PyTorch s podporou CUDA:**",
            "- [x] **1. In≈°tal√°cia PyTorch s podporou CUDA:**"
        ).replace(
            "- [ ] **2. Overenie funkƒçnosti CUDA:**",
            "- [x] **2. Overenie funkƒçnosti CUDA:**"
        )
        
        # Z√°pis aktualizovan√©ho obsahu
        with open("TODO.md", "w", encoding="utf-8") as f:
            f.write(updated_content)
        
        print("‚úÖ TODO.md bol aktualizovan√Ω s dokonƒçen√Ωmi √∫lohami F√°zy 1")
        return True
        
    except Exception as e:
        print(f"‚ùå Chyba pri aktualiz√°cii TODO.md: {e}")
        return False

def main():
    """Hlavn√° funkcia testovania F√°zy 1"""
    print("TEST DOKONƒåENIA F√ÅZY 1")
    print("Overenie splnenia v≈°etk√Ωch po≈æiadaviek z TODO.md")
    
    # Zoznam testov
    tests = [
        ("In≈°tal√°cia PyTorch s CUDA", test_pytorch_cuda_installation),
        ("Funkƒçnos≈• CUDA", test_cuda_functionality),
        ("Potrebn√© s√∫bory", check_required_files),
        ("ML pripravenos≈•", test_ml_readiness)
    ]
    
    # Spustenie testov
    results = []
    for test_name, test_func in tests:
        print(f"\n--- {test_name} ---")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Chyba v teste '{test_name}': {e}")
            results.append((test_name, False))
    
    # Vyhodnotenie v√Ωsledkov
    print("\n" + "="*60)
    print("S√öHRN V√ùSLEDKOV F√ÅZY 1")
    print("="*60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PRE≈†IEL" if result else "‚ùå ZLYHAL"
        print(f"{test_name:25} {status}")
        if result:
            passed += 1
    
    print(f"\nCelkov√Ω v√Ωsledok: {passed}/{total} testov pre≈°lo")
    
    # Fin√°lne hodnotenie
    if passed == total:
        print("\nüéâ F√ÅZA 1 JE √öSPE≈†NE DOKONƒåEN√Å!")
        print("V≈°etky po≈æiadavky s√∫ splnen√©.")
        
        # Aktualiz√°cia TODO.md
        update_todo_status()
        
        print("\nüìã ƒéAL≈†IE KROKY:")
        print("- M√¥≈æete pokraƒçova≈• s F√°zou 2: Zber d√°t pre tr√©novanie")
        print("- Spustite: python collect_data.py (po implement√°cii)")
        
        return True
    else:
        print("\n‚ùå F√ÅZA 1 NIE JE √öPLNE DOKONƒåEN√Å")
        print("Niektor√© testy zlyhali. Skontrolujte chyby vy≈°≈°ie.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
